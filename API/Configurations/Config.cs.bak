// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.



using IdentityServer4;
using IdentityServer4.Models;
using IdentityServer4.Test;
using System.Collections.Generic;
using System.Security.Claims;

namespace FinanceManager.Auth.Configurations
{
    //public static class Config
    //{
        internal class Resources
        {
            public static IEnumerable<IdentityResource> GetIdentityResources()
            {
                return new[]
                {
                    new IdentityResources.OpenId(),
                    new IdentityResources.Profile(),
                    new IdentityResources.Email(),
                    new IdentityResource
                    {
                        Name = "roles",
                        UserClaims = new List<string> {"role"}
                    }
                };
            }

            public static IEnumerable<ApiResource> GetApiResources()
            {
                return new[]
                {
                    new ApiResource
                    {
                        Name = "api1",
                        DisplayName = "API #1",
                        Description = "Allow the application to access API #1 on your behalf",
                        Scopes = new List<string> {"api1.read", "api1.write"},
                        ApiSecrets = new List<Secret> {new Secret("ScopeSecret".Sha256())}, // change me!
                        UserClaims = new List<string> {"role"}
                    }
                };
            }

            public static IEnumerable<ApiScope> GetApiScopes()
            {
                return new[]
                {
                    new ApiScope("api1.read", "Read Access to API #1"),
                    new ApiScope("api1.write", "Write Access to API #1")
                };
            }
        }

    //public static IEnumerable<IdentityResource> GetIdentityResources()
    //{
    //    return new IdentityResource[]
    //    {
    //         new IdentityResources.OpenId(),
    //         new IdentityResources.Profile(),
    //         new IdentityResource("roles", new[] { "role" })
    //    };
    //}



    //public static IEnumerable<IdentityResource> GetIdentityResources()
    //{

    //    return new[]
    //    {
    //        new IdentityResources.OpenId(),
    //        new IdentityResources.Profile(),
    //        new IdentityResources.Email(),
    //        new IdentityResource("roles", new[] { "role" }),
    //        new IdentityResource("apiEau", new[] { "role" })

    //    };
    //}


    //public static IEnumerable<ApiResource> Apis =>
    //    new List<ApiResource>
    //    {
    //        new ApiResource("apiEau", "API Programme Eau")
    //    };

    //public static IEnumerable<IdentityResource> GetIdentityResources()
    //{
    //    return new IdentityResource[]
    //    {
    //        new IdentityResources.OpenId(),
    //        new IdentityResources.Profile(),
    //        new IdentityResources.Email(),
    //        new IdentityResource("roles", new[] { "role" })
    //    };
    //}

    //public static IEnumerable<ApiResource> GetApis()
    //{
    //    return new List<ApiResource>
    //    {
    //        //new ApiResource("api1", "My API"),
    //        //new ApiResource("api1", "My Resource API")
    //        // {
    //        //     Scopes =
    //        //        {
    //        //            new Scope()
    //        //            {
    //        //                Name = "api1",
    //        //                DisplayName = "Some API 1"
    //        //            }
    //        //        }
    //        // }
    //        new ApiResource
    //        {
    //            Name = "My Api",
    //            Scopes = new Scope[] { new Scope("MyApiScope", new string[] { IdentityModel.JwtClaimTypes.Name }) },
    //            UserClaims = new string [] { IdentityModel.JwtClaimTypes.MiddleName } //I think this gets included in every api resource regardless of scope but haven't tried
    //        },
    //    };
    //}

    //public static IEnumerable<ApiResource> GetApiResources()
    //{
    //    return new[]
    //    {
    //        new ApiResource
    //        {
    //            Name = "EauApi",
    //            DisplayName = "API Eau",
    //            Description = "Permet d'acerder au API programme eau",
    //            Scopes = new List<string> {"apieau.read", "apieau.write"},
    //            ApiSecrets = new List<Secret> {new Secret("ScopeSecret".Sha256())},
    //            UserClaims = new List<string> {"role"}
    //        },
    //         new ApiResource("myresourceapi", "My Resource API")
    //         {
    //             Scopes = new List<string> {"apiscope"}
    //         }
    //    };
    //}

    //public static IEnumerable<ApiScope> GetApiScopes()
    //{
    //    return new[]
    //    {
    //        new ApiScope("apieau.read", "Read Access to API Eau"),
    //        new ApiScope("apieau.write", "Write Access to API Eau")
    //    };
    //}

    //public static IEnumerable<ApiResource> GetApis()
    //{
    //    return new List<ApiResource>
    //    {
    //        new ApiResource("myresourceapi", "My Resource API")
    //        {
    //            Scopes = {new Scope("apiscope")}
    //        }
    //    };
    //}
    ////return new List<ApiResource>
    //return new ApiResource("myresourceapi", "My Resource API")
    //{
    //    Scopes = { new Scope("apiscope") }
    //};
    //{
    //    new ApiResource("apiEau", "Programme Eau API")
    //};

    internal class Clientes
    {

        public static IEnumerable<Client> GetClients()
        {
            return new List<Client>
            {
                new Client
                {
                    ClientId = "client",

                    // no interactive user, use the clientid/secret for authentication
                    AllowedGrantTypes = GrantTypes.ClientCredentials,
                    AllowOfflineAccess = true,
                    RequireConsent = false,  

                    // secret for authentication
                    ClientSecrets =
                    {
                        new Secret("secret".Sha256())
                    },

                    // scopes that client has access to
                    AllowedScopes =
                    {
                        "apiEau"
                    },
                },
                // resource owner password grant client
                new Client
                {
                    ClientId = "ro.client",
                    AllowedGrantTypes = GrantTypes.ResourceOwnerPassword,
                    AllowOfflineAccess = true,

                    ClientSecrets =
                    {
                        new Secret("secret".Sha256())
                    },
                    AllowedScopes = { "apiEau" }
                },

                new Client
                {
                    ClientId = "ccef3933-329a-47fb-b891-41840bf6de5c",
                    AllowedGrantTypes = GrantTypes.ResourceOwnerPassword,
                    AccessTokenType = AccessTokenType.Jwt,
                    AccessTokenLifetime = 120, //86400,
                    IdentityTokenLifetime = 120, //86400,
                    UpdateAccessTokenClaimsOnRefresh = true,
                    SlidingRefreshTokenLifetime = 30,
                    AllowOfflineAccess = true,
                    RefreshTokenExpiration = TokenExpiration.Absolute,
                    RefreshTokenUsage = TokenUsage.OneTimeOnly,
                    AlwaysSendClientClaims = true,
                    Enabled = true,

                    ClientSecrets =
                    {
                        new Secret("1xgqJp1iBi0nBMXWKSA30_7azZynZf7FBkKUg3wG".Sha256())
                    },
                    AllowedScopes = new List<string>
                    {
                        "apiEau",
                       IdentityServerConstants.StandardScopes.OfflineAccess,
                    },
                    //AllowOfflineAccess = true,
                    //AccessTokenType = AccessTokenType.Reference, // revocation endpoint work with reference access token only
                }
            };
        }
    }
}